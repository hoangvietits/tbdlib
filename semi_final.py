# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'semi_final.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import CallAPI
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton, QLabel, QLineEdit, QTableView, QSplitter, QHeaderView, QMessageBox
from PyQt5 import QtGui, QtCore
from PyQt5.QtCore import Qt 
from PyQt5.QtGui import QImage, QPixmap
from pyzbar import pyzbar
import cv2
import report
import createmember as mail

class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 900)
        MainWindow.setMaximumSize(QtCore.QSize(1280, 680))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.tbd_label = QtWidgets.QLabel(self.centralwidget)
        self.tbd_label.setGeometry(QtCore.QRect(40, 20, 101, 101))
        self.tbd_label.setAutoFillBackground(False)
        self.tbd_label.setText("")
        self.tbd_label.setPixmap(QtGui.QPixmap("image/tbd.png"))
        self.tbd_label.setScaledContents(True)
        self.tbd_label.setObjectName("tbd_logo")

        
        self.khoa_label = QtWidgets.QLabel(self.centralwidget)
        self.khoa_label.setGeometry(QtCore.QRect(40, 120, 81, 71))
        self.khoa_label.setAutoFillBackground(False)
        self.khoa_label.setText("")
        self.khoa_label.setPixmap(QtGui.QPixmap("image/cntt.png"))
        self.khoa_label.setScaledContents(True)
        self.khoa_label.setObjectName("khoa_logo")

        
        self.lib_label = QtWidgets.QLabel(self.centralwidget)
        self.lib_label.setGeometry(QtCore.QRect(160, 20, 131, 121))
        self.lib_label.setAutoFillBackground(False)
        self.lib_label.setText("")
        self.lib_label.setPixmap(QtGui.QPixmap("image/tbd_lib.png"))
        self.lib_label.setScaledContents(True)
        self.lib_label.setObjectName("lib_logo")

        self.camera_label = QtWidgets.QLabel(self.centralwidget) 
        self.camera_label.setGeometry(QtCore.QRect(280, 80, 771, 441))
        self.camera_label.setObjectName("camera_label")
        self.camera_label.setScaledContents(True)
        self.tv_text = QtWidgets.QLineEdit(self.centralwidget)
        self.tv_text.setGeometry(QtCore.QRect(400, 530, 541, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.tv_text.setFont(font)
        self.tv_text.setReadOnly(True)
        self.tv_text.setObjectName("tv_text")
        self.book_text = QtWidgets.QLineEdit(self.centralwidget)
        self.book_text.setGeometry(QtCore.QRect(400, 590, 541, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.book_text.setFont(font)
        self.book_text.setReadOnly(True)
        self.book_text.setObjectName("book_text")
        self.tv_label = QtWidgets.QLabel(self.centralwidget)
        self.tv_label.setGeometry(QtCore.QRect(210, 530, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        font.setBold(False)
        font.setWeight(50)
        self.tv_label.setFont(font)
        self.tv_label.setObjectName("tv_label")
        self.book_label = QtWidgets.QLabel(self.centralwidget)
        self.book_label.setGeometry(QtCore.QRect(210, 580, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.book_label.setFont(font)
        self.book_label.setObjectName("book_label")

        self.rtn_book_label = QtWidgets.QLabel(self.centralwidget)
        self.rtn_book_label.setGeometry(QtCore.QRect(230, 530, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.rtn_book_label.setFont(font)
        self.rtn_book_label.setObjectName("rtn_book_label")
        self.rtn_book_label.setText("ID Sách")
        self.rtn_book_label.setStyleSheet("QLabel { color : red; }")
        
        self.active =''

        self.rtn_book_text = QtWidgets.QLineEdit(self.centralwidget)
        self.rtn_book_text.setGeometry(QtCore.QRect(400, 530, 541, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.rtn_book_text.setFont(font)
        self.rtn_book_text.setReadOnly(True)
        self.rtn_book_text.setObjectName("rtn_book_text")
        

        self.brg_label = QtWidgets.QLabel(self.centralwidget)
        self.brg_label.setGeometry(QtCore.QRect(0, 10, 1591, 881))
        self.brg_label.setAutoFillBackground(False)
        self.brg_label.setText("")
        self.brg_label.setPixmap(QtGui.QPixmap("image/bgr.jpg"))
        self.brg_label.setScaledContents(True)
        self.brg_label.setObjectName("brg_label")
        self.search_table = QtWidgets.QTableView(self.centralwidget)
        self.search_table.setGeometry(QtCore.QRect(230, 205, 1041, 681))
        self.search_table.setObjectName("search_table")
        self.search_table.setFont(font)
        self.btn_search_lv1 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_search_lv1.setGeometry(QtCore.QRect(0, 210, 231, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.btn_search_lv1.setFont(font)
        self.btn_search_lv1.setStyleSheet("QPushButton{\n"
"    background-color:rgb(0, 170, 127);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,224,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_search_lv1.setObjectName("btn_search_lv1")
        self.btn_brw_lv1 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_brw_lv1.setGeometry(QtCore.QRect(0, 290, 231, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.btn_brw_lv1.setFont(font)
        self.btn_brw_lv1.setStyleSheet("QPushButton{\n"
"    background-color:rgb(126, 125, 0);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_brw_lv1.setObjectName("btn_brw_lv1")
        self.btn_muon_ok = QtWidgets.QPushButton(self.centralwidget)
        self.btn_muon_ok.setGeometry(QtCore.QRect(960, 530, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.btn_muon_ok.setFont(font)
        self.btn_muon_ok.setStyleSheet("QPushButton{\n"
"    background-color:rgb(255, 0, 0);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_muon_ok.setObjectName("btn_muon_ok")
        self.btn_muon_cancel = QtWidgets.QPushButton(self.centralwidget)
        self.btn_muon_cancel.setGeometry(QtCore.QRect(960, 580, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.btn_muon_cancel.setFont(font)
        self.btn_muon_cancel.setStyleSheet("QPushButton{\n"
"    background-color:rgb(0, 125, 230);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_tra_ok = QtWidgets.QPushButton(self.centralwidget)
        self.btn_tra_ok.setGeometry(QtCore.QRect(960, 530, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.btn_tra_ok.setFont(font)
        self.btn_tra_ok.setStyleSheet("QPushButton{\n"
"    background-color:rgb(255, 0, 0);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_tra_ok.setObjectName("btn_muon_ok")
        self.btn_tra_ok.setText("Trả")
        self.btn_tra_cancel = QtWidgets.QPushButton(self.centralwidget)
        self.btn_tra_cancel.setGeometry(QtCore.QRect(960, 590, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.btn_tra_cancel.setFont(font)
        self.btn_tra_cancel.setText("Cancel")
        self.btn_tra_cancel.setStyleSheet("QPushButton{\n"
"    background-color:rgb(0, 125, 230);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_tra_cancel.setObjectName("btn_tra_cancel")
        self.btn_ret_lv1 = QtWidgets.QPushButton(self.centralwidget)
        self.btn_ret_lv1.setGeometry(QtCore.QRect(0, 370, 231, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.btn_ret_lv1.setFont(font)
        self.btn_ret_lv1.setStyleSheet("QPushButton{\n"
"    background-color:rgb(0, 120, 0);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_ret_lv1.setObjectName("btn_ret_lv1")
        self.btn_contact = QtWidgets.QPushButton(self.centralwidget)
        self.btn_contact.setGeometry(QtCore.QRect(0, 450, 231, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.btn_contact.setFont(font)
        self.btn_contact.setStyleSheet("QPushButton{\n"
"    background-color:rgb(0, 30, 0);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        self.btn_contact.setObjectName("btn_contact")
        self.search_text = QtWidgets.QLineEdit(self.centralwidget)
        self.search_text.setGeometry(QtCore.QRect(330, 90, 541, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.search_text.setFont(font)
        self.search_text.setObjectName("search_text")
        self.search_text.setPlaceholderText("Nhập tên sách bạn muốn tìm")
        self.search_text.installEventFilter(self)
        self.btn_search = QtWidgets.QPushButton(self.centralwidget)
        self.btn_search.setGeometry(QtCore.QRect(890, 90, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.btn_search.setFont(font)
        self.btn_search.setStyleSheet("QPushButton{\n"
"    background-color:rgb(255, 170, 255);\n"
"    color: white;\n"
"    border-style: outset;\n"
"    border-width: 2px;\n"
"    border-radius: 10px;\n"
"    border-color: white;\n"
"}\n"
"\n"
"QPushButton::pressed{\n"
"    background-color: rgb(224,000,0);\n"
"    border-style: inset;\n"
"}")
        

        self.tbd_label.setVisible(True)
        self.lib_label.setVisible(True)
        self.khoa_label.setVisible(True)
        
        ## raise item
       
        self.btn_search.setObjectName("btn_search")
        self.brg_label.raise_()
        self.search_table.raise_()
        self.btn_search_lv1.raise_()
        self.btn_brw_lv1.raise_()
        self.tv_text.raise_()
        self.book_text.raise_()
        self.book_label.raise_()
        self.tv_label.raise_()
        self.btn_muon_ok.raise_()
        self.btn_muon_cancel.raise_()
        self.btn_ret_lv1.raise_()
        self.btn_contact.raise_()
        self.search_text.raise_()
        self.btn_search.raise_()
        self.camera_label.raise_()
        self.btn_tra_cancel.raise_()
        self.btn_tra_ok.raise_()
        self.lib_label.raise_()
        self.khoa_label.raise_()
        self.tbd_label.raise_()
        self.rtn_book_label.raise_()
        self.rtn_book_text.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        ## tạo camera
        self.cap = cv2.VideoCapture(0)
        self.is_camera_open = False

        ## Hide item
        self.tv_text.setVisible(False)
        self.book_text.setVisible(False)
        self.camera_label.setVisible(False)
        self.btn_muon_ok.setVisible(False)
        self.btn_muon_cancel.setVisible(False)
        self.tv_label.setVisible(False)
        self.book_label.setVisible(False)
        self.btn_tra_cancel.setVisible(False)
        self.btn_tra_ok.setVisible(False)
        self.rtn_book_label.setVisible(False)
        self.rtn_book_text.setVisible(False)
        ## button clicked
        self.btn_brw_lv1.clicked.connect(self.btn_muon)
        self.btn_contact.clicked.connect(self.contact)
        self.btn_search_lv1.clicked.connect(self.search_book)
        self.btn_ret_lv1.clicked.connect(self.btn_tra)
        self.btn_search.clicked.connect(lambda: self.timsach(str(self.search_text.text())))
        self.btn_muon_ok.clicked.connect(self.muon_ok)
        self.btn_muon_cancel.clicked.connect(self.muon_cancel)
        self.btn_tra_ok.clicked.connect(self.tra_ok)
        self.btn_tra_cancel.clicked.connect(self.tra_cancel)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
    ## function 
    def eventFilter(self, obj, event) -> bool:
        if obj is self.search_text and event.type() == event.FocusIn:
            self.search_text.setPlaceholderText("")
        elif event.type() == event.FocusOut:
                # Khôi phục hint nếu line edit không chứa văn bản
                if not self.search_text.text():
                    self.search_text.setPlaceholderText("Nhập tên sách bạn muốn tìm")
        return super().eventFilter(obj, event)
    
    def tra_ok(self):
       
        a = self.rtn_book_text.text()
        if(a!=""):
            CallAPI.Rtn_book(a)
            self.show_message("Đã cập nhật tình trạng sách")
        else:
            self.show_message("Mã sách không được để trống!")

    
    def tra_cancel(self):
        self.book_text.setText("")

    def muon_ok(self): 
            a = str(self.tv_text.text())
            b = str(self.book_text.text())
            if(a != "" and b != ""):
                try:
                    CallAPI.Record(a,b)
                    member = CallAPI.find_member(a)
                    member_name = member[2]
                    email_member = member[0]
                    book_name = member[1]
                    self.show_message("Mượn sách thành công!")
                    self.tv_text.setText("")
                    self.book_text.setText("")
                    mail.brw_book_mail(email_member,book_name,member_name)
                except:
                    self.show_message("ID không tồn tại, vui lòng liên hệ thủ thư!")               
            else:
                self.show_message("Thông tin không được để trống.")


    def show_message(self, body: str):
        msg = QMessageBox()
        msg.setText(body)
        msg.setWindowTitle("Thông báo")
        msg.exec_()    

    def muon_cancel(self):
        self.tv_text.setText("")
        self.book_text.setText("")

    def btn_muon(self):
        self.active = 'muon'
        self.tv_text.setText("")
        self.book_text.setText("")
        self.search_item(False)
        self.rtn_item(False)
        self.muon_item(True)
     
        if not self.is_camera_open:
            self.open_camera()
            self.is_camera_open = True

    def cam_release(self):
        if self.is_camera_open:
            self.cap.release()
            self.is_camera_open = False

    
    def btn_tra(self):
        self.active = 'tra'
        self.rtn_book_text.setText("")
        self.muon_item(False)
        self.search_item(False)
        self.rtn_item(True)
        if not self.is_camera_open:
            self.open_camera()
            self.is_camera_open = True

    
    def muon_item(self, param: bool):
        self.btn_muon_cancel.setVisible(param)
        self.btn_muon_ok.setVisible(param)
        self.camera_label.setVisible(param)
        self.tv_label.setVisible(param)
        self.tv_text.setVisible(param)
        self.book_label.setVisible(param)
        self.book_text.setVisible(param)
        
    
    def search_item(self, param: bool):
        self.search_text.setVisible(param)
        self.btn_search.setVisible(param)
        self.search_table.setVisible(param)

    def rtn_item(self, param: bool):
        self.camera_label.setVisible(param)
        self.btn_tra_cancel.setVisible(param)
        self.btn_tra_ok.setVisible(param)   
        self.rtn_book_label.setVisible(param)
        self.rtn_book_text.setVisible(param)


    def contact(self):
        self.report = report.Ui_MainWindow()
        ui = self.report.setupUi(self.report)
        self.report.show()
    
    def search_book(self):
        self.muon_item(False)
        self.rtn_item(False)
        self.search_item(True)

  

    def timsach(self, book_name: str):
        
        result = CallAPI.TimSach(book_name)
        header = ["Tên tác giả","Tên sách","Nhà xuất bản", "Mã sách"]
        model = QtGui.QStandardItemModel(result.index.size, result.columns.size)
        for i,row in result.iterrows():
            for j,col in enumerate(result.columns):
                item = QtGui.QStandardItem(str(row[col]))
                item.setEditable(False)
                model.setItem(i,j,item)
                
                
        a = self.search_table
        
        model.setHeaderData(0,Qt.Orientation.Horizontal,header[0], QtCore.Qt.ItemDataRole.EditRole)
        model.setHeaderData(1,Qt.Orientation.Horizontal,header[1], QtCore.Qt.ItemDataRole.EditRole)
        model.setHeaderData(2,Qt.Orientation.Horizontal,header[2], QtCore.Qt.ItemDataRole.EditRole)
        model.setHeaderData(3,Qt.Orientation.Horizontal,header[3], QtCore.Qt.ItemDataRole.EditRole)
        a.setModel(model)
        a.setWordWrap(True)  
        a.setColumnWidth(0,340)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        a.setFont(font)
        a.setColumnWidth(1,340)
        a.setColumnWidth(2,340)
        a.setColumnWidth(3,340)
        a.show()
    
    def open_camera(self):
        try: 
        # Mở camera và hiển thị hình ảnh

            while True:
                ret, frame = self.cap.read()
                
                if not ret:
                    break
                # Hiển thị hình ảnh từ camera ở khu vực mượn/trả sách

                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                frame = cv2.flip(frame, 1)  # Lật hình ảnh theo chiều ngang
                h, w, ch = frame.shape
                bytes_per_line = ch * w
                q_image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
                pixmap = QPixmap(q_image)
                pixmap = pixmap.scaledToWidth(self.width() // 2)
                self.camera_label.setPixmap(pixmap)
                QApplication.processEvents()

                barcodes = pyzbar.decode(frame)
                for barcode in barcodes:
                    (x,y,w,h) = barcode.rect
                    cv2.rectangle(frame, (x,y), (x+w, y+h), (0,255,255),2)
                    barcodeData = barcode.data.decode("utf-8")
                    barcodeType = barcode.type
                    text = "{}-{}".format(barcodeData,barcodeType)
                    contents = text.split('-')
                    meta_contents = str(contents[0])
                    if self.active == 'muon':
                         if len(meta_contents) <=4:
                             self.book_text.setText(f"{meta_contents}")
                         else:
                             self.tv_text.setText(f"{meta_contents}")
                    if self.active == 'tra':
                        if len(meta_contents) <=4:
                            self.rtn_book_text.setText(f"{meta_contents}")
                        
        except:
            self.show_message("Không tìm thấy camera, vui lòng kiểm tra kết nối")



        
    
            

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "TBD Library"))
        self.camera_label.setText(_translate("MainWindow", ""))
        self.tv_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\"> ID thành viên</span></p></body></html>"))
        self.book_label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ff0000;\">ID sách</span></p></body></html>"))
        self.btn_search_lv1.setText(_translate("MainWindow", "Tìm sách"))
        self.btn_brw_lv1.setText(_translate("MainWindow", "Mượn sách"))
        self.btn_muon_ok.setText(_translate("MainWindow", "Mượn"))
        self.btn_muon_cancel.setText(_translate("MainWindow", "Cancel"))
        self.btn_ret_lv1.setText(_translate("MainWindow", "Trả sách"))
        self.btn_contact.setText(_translate("MainWindow", "Báo lỗi"))
        self.btn_search.setText(_translate("MainWindow", "Tìm"))
        self.lib_label.setText(_translate("MainWindow",""))
        self.tbd_label.setText(_translate("MainWindow",""))
        self.khoa_label.setText(_translate("MainWindow",""))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
